<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.Core</name>
    </assembly>
    <members>
        <member name="T:Puzzles.Meta.Analytics.FailedReason">
            <summary>
            Represents a failed reason.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Analytics.FailedReason.None">
            <summary>
            Indicates there's no failure.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Analytics.FailedReason.PuzzleInvalid">
            <summary>
            Indicates the puzzle is invalid.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Analytics.FailedReason.UserCancelled">
            <summary>
            Indicates the user has cancelled the current task.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Analytics.FailedReason.OutOfMemory">
            <summary>
            Indicates the failed reason is that the puzzle has run out of memory to be allocated.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Analytics.FailedReason.ExceptionThrown">
            <summary>
            Indicates an unhandled exception is thrown.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Analytics.IAnalysisResult`3">
            <summary>
            Represents an instance that describes the result after being analyzed.
            </summary>
            <typeparam name="TSelf"><self-type-constraint>
		<para>Indicates the type implementing this interface.</para>
		<para>
			This type doesn't use any extra syntax to constraint such usage, but C# will check for it.
			The type will include a <see langword="where" /> constraint that implements the interface itself
			to declare such "self constraint" usage:
			<code><![CDATA[interface ISelfType<TSelf> where TSelf : ISelfType<TSelf>]]></code>
			In addition, the type should be named <c>TSelf</c> in order to tell type parameters with the others.
		</para>
	</self-type-constraint></typeparam>
            <typeparam name="TBoard">The type of board.</typeparam>
            <typeparam name="TStep">The type of step.</typeparam>
        </member>
        <member name="P:Puzzles.Meta.Analytics.IAnalysisResult`3.IsSolved">
            <summary>
            Indicates whether the solver has solved the puzzle.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.IAnalysisResult`3.FailedReason">
            <summary>
            Indicates the failed reason.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.IAnalysisResult`3.ElapsedTime">
            <summary>
            Indicates the elapsed time used during solving the puzzle. The value may not be an useful value.
            Some case if the puzzle doesn't contain a valid unique solution, the value may be
            <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
            <seealso cref="F:System.TimeSpan.Zero"/>
        </member>
        <member name="P:Puzzles.Meta.Analytics.IAnalysisResult`3.Steps">
            <summary>
            Indicates the steps.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.IAnalysisResult`3.Puzzle">
            <summary>
            Indicates the original puzzle to be solved.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.IAnalysisResult`3.UnhandledException">
            <summary>
            Indicates the unhandled exception thrown.
            </summary>
        </member>
        <member name="M:Puzzles.Meta.Analytics.IAnalysisResult`3.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Puzzles.Meta.Analytics.IAnalyzer`4">
            <summary>
            Represents an analyzer.
            </summary>
            <typeparam name="TSelf"><self-type-constraint>
		<para>Indicates the type implementing this interface.</para>
		<para>
			This type doesn't use any extra syntax to constraint such usage, but C# will check for it.
			The type will include a <see langword="where" /> constraint that implements the interface itself
			to declare such "self constraint" usage:
			<code><![CDATA[interface ISelfType<TSelf> where TSelf : ISelfType<TSelf>]]></code>
			In addition, the type should be named <c>TSelf</c> in order to tell type parameters with the others.
		</para>
	</self-type-constraint></typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <typeparam name="TBoard">The type of the board.</typeparam>
            <typeparam name="TStep">The type of step.</typeparam>
        </member>
        <member name="M:Puzzles.Meta.Analytics.IAnalyzer`4.Analyze(`2,System.Threading.CancellationToken)">
            <summary>
            Analyzes the puzzle of type <typeparamref name="TBoard"/>.
            </summary>
            <param name="board">The board.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>An instance of type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="T:Puzzles.Meta.Analytics.ICollector`2">
            <summary>
            Represents a collector instance.
            </summary>
            <typeparam name="TBoard">The type of puzzle or grid.</typeparam>
            <typeparam name="TStep">The type of match.</typeparam>
        </member>
        <member name="M:Puzzles.Meta.Analytics.ICollector`2.Collect(`0,System.Threading.CancellationToken)">
            <summary>
            Try to find all possible steps appeared in the board; if no steps found, an empty array will be returned.
            </summary>
            <param name="board">The board.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current task.</param>
            <returns>All matched items.</returns>
        </member>
        <member name="T:Puzzles.Meta.Analytics.IDifficultyStep`2">
            <summary>
            Represents a step that requires difficulty rating.
            </summary>
            <typeparam name="TSelf"><self-type-constraint>
		<para>Indicates the type implementing this interface.</para>
		<para>
			This type doesn't use any extra syntax to constraint such usage, but C# will check for it.
			The type will include a <see langword="where" /> constraint that implements the interface itself
			to declare such "self constraint" usage:
			<code><![CDATA[interface ISelfType<TSelf> where TSelf : ISelfType<TSelf>]]></code>
			In addition, the type should be named <c>TSelf</c> in order to tell type parameters with the others.
		</para>
	</self-type-constraint></typeparam>
            <typeparam name="TDifficulty">Indicates the type of difficulty.</typeparam>
        </member>
        <member name="P:Puzzles.Meta.Analytics.IDifficultyStep`2.Difficulty">
            <summary>
            Indicates the difficulty rating of the instance.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Analytics.IStep`1">
            <summary>
            Represents a step.
            </summary>
            <typeparam name="TSelf"><self-type-constraint>
		<para>Indicates the type implementing this interface.</para>
		<para>
			This type doesn't use any extra syntax to constraint such usage, but C# will check for it.
			The type will include a <see langword="where" /> constraint that implements the interface itself
			to declare such "self constraint" usage:
			<code><![CDATA[interface ISelfType<TSelf> where TSelf : ISelfType<TSelf>]]></code>
			In addition, the type should be named <c>TSelf</c> in order to tell type parameters with the others.
		</para>
	</self-type-constraint></typeparam>
        </member>
        <member name="T:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6">
            <summary>
            Represents an analyzer object that will use randomization algorithm to find paths, and score them up.
            </summary>
            <typeparam name="TBoard">The type of puzzle or grid.</typeparam>
            <typeparam name="TPoint">The type of point.</typeparam>
            <typeparam name="TStep">The type of step.</typeparam>
            <typeparam name="TDifficulty">The type of difficulty.</typeparam>
            <typeparam name="TCollector">The type of collector.</typeparam>
            <typeparam name="TAnalysisResult">The type of analysis result.</typeparam>
        </member>
        <member name="F:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6._collector">
            <summary>
            Indicates the backing collector object.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6._rng">
            <summary>
            Indicates the backing random number generator.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6.DistanceWeight">
            <summary>
            Indicates the distance weight.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6.VisualDistanceWeight">
            <summary>
            Indicates the visual distance weight.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6.TemporatureFactor">
            <summary>
            Indicates temporature factor.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6.DistanceType">
            <summary>
            Indicates the calculating distance type.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6.StartPointCreator">
            <summary>
            Represents a start point creator.
            </summary>
        </member>
        <member name="M:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6.Analyze(`0,System.ReadOnlySpan{System.Int32}@,System.Threading.CancellationToken)">
            <summary>
            Try to analyze a board, and return the steps found, encapsulated by <typeparamref name="TAnalysisResult"/>.
            </summary>
            <param name="board">The board to be analyzed.</param>
            <param name="availableStepsCount">The number of available steps.</param>
            <param name="cancellationToken">Indicates the cancellation token that can cancel the current operation.</param>
            <returns>An instance of type <typeparamref name="TAnalysisResult"/> indicating the result information.</returns>
        </member>
        <member name="M:Puzzles.Meta.Analytics.RandomizedScoringAnalyzerBase`6.Puzzles#Meta#Analytics#IAnalyzer{Puzzles#Meta#Analytics#RandomizedScoringAnalyzerBase{TBoard,TPoint,TStep,TDifficulty,TCollector,TAnalysisResult},TAnalysisResult,TBoard,TStep}#Analyze(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Meta.Concepts.Coordinate">
            <summary>
            Represents a coordinate.
            </summary>
            <param name="X">Indicates the row index.</param>
            <param name="Y">Indicates the column index.</param>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents a coordinate.
            </summary>
            <param name="X">Indicates the row index.</param>
            <param name="Y">Indicates the column index.</param>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.X">
            <summary>Indicates the row index.</summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.Y">
            <summary>Indicates the column index.</summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.Up">
            <summary>
            Indicates the left cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.Down">
            <summary>
            Indicates the right cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.Left">
            <summary>
            Indicates the up cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.Right">
            <summary>
            Indicates the down cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.UpLeft">
            <summary>
            Indicates the up-left cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.UpRight">
            <summary>
            Indicates the up-right cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.DownLeft">
            <summary>
            Indicates the down-left cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.DownRight">
            <summary>
            Indicates the down-right cell.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.System#Numerics#IMinMaxValue{Puzzles#Meta#Concepts#Coordinate}#MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Meta.Concepts.Coordinate.System#Numerics#IMinMaxValue{Puzzles#Meta#Concepts#Coordinate}#MaxValue">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.PrintMembers(System.Text.StringBuilder)">
            <target name="method" cref="M:Puzzles.Meta.Concepts.Coordinate.PrintMembers(System.Text.StringBuilder)">
				<summary>
					Provides an easy way to concatenate output members inside a <see langword="record" />
					or a <see langword="record struct" /> type.
				</summary>
				<param name="builder">
					A <see cref="T:System.Text.StringBuilder" /> instance to concatenate values.
				</param>
				<returns>
					A <see cref="T:System.Boolean" /> value indicating whether the method should be consumed by compiler,
					by implementing to-string method <see cref="M:Puzzles.Meta.Concepts.Coordinate.ToString" />.
				</returns>
				<remarks>
					<para>
						By design of <see langword="record" /> and <see langword="record struct" /> types,
						emit text should be formatted as follows:
						<code><![CDATA[RecordType { Property1 = Value1, Property2 = Value2, Property3 = { NestedProperty = Value3 } }]]></code>
					</para>
					<para>
						This method won't emit type name and curly brackets. If you want to customize emit text,
						you can only change values inside a pair of brackets.
					</para>
					<para>
						The suggested implementation is like this:
						<code><![CDATA[private bool PrintMembers(StringBuilder builder)
{
    builder.Append($"{nameof(Property1)} = {Property1}");
    builder.Append(", ");
    builder.Append($"{nameof(Property2)} = {Property2}");
    builder.Append(", ");
    builder.Append($"{nameof(Property3)} = {{ {Property3} }}");
    return true;
}]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.CompareTo(Puzzles.Meta.Concepts.Coordinate)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_Subtraction(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Coordinate)">
            <summary>
            Check location relation of two adjacent <see cref="T:Puzzles.Meta.Concepts.Coordinate"/> instances;
            if they are same, <see cref="F:Puzzles.Meta.Concepts.Direction.None"/> will be returned instead of throwing exceptions.
            </summary>
            <param name="left">The left instance to be checked.</param>
            <param name="right">The right instance to be checked.</param>
            <exception cref="T:System.InvalidOperationException">
            Throws when the two coordinates has a gap between them, or they cannot see each other in their own direction
            (i.e. not adjacent with each other).
            </exception>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_RightShift(Puzzles.Meta.Concepts.Coordinate,System.Char)">
            <summary>
            Moves the coordinate one step forward to the next coordinate by the specified direction.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="arrow">The direction.</param>
            <returns>The new coordinate.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="arrow"/> is out of range.
            </exception>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_RightShift(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Direction)">
            <summary>
            Moves the coordinate one step forward to the next coordinate by the specified direction.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="direction">The direction.</param>
            <returns>The new coordinate.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="direction"/> is out of range.
            </exception>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_Addition(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Coordinate)">
            <summary>
            Projects the base coordinate <paramref name="base"/> with the specified offset to the target coordinate,
            by adding values to properties <see cref="P:Puzzles.Meta.Concepts.Coordinate.X"/> and <see cref="P:Puzzles.Meta.Concepts.Coordinate.Y"/> respectively.
            </summary>
            <param name="base">The base coordinate.</param>
            <param name="offset">The offset to be used.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_CheckedAddition(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Coordinate)">
            <summary>
            Projects the base coordinate <paramref name="base"/> with the specified offset to the target coordinate,
            by adding values to properties <see cref="P:Puzzles.Meta.Concepts.Coordinate.X"/> and <see cref="P:Puzzles.Meta.Concepts.Coordinate.Y"/> respectively.
            </summary>
            <param name="base">The base coordinate.</param>
            <param name="offset">The offset to be used.</param>
            <returns>The result.</returns>
            <exception cref="T:System.OverflowException">Throws when overflows in adding operation.</exception>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_GreaterThan(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Coordinate)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_LessThan(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Coordinate)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_GreaterThanOrEqual(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Coordinate)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.Coordinate.op_LessThanOrEqual(Puzzles.Meta.Concepts.Coordinate,Puzzles.Meta.Concepts.Coordinate)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)"/>
        </member>
        <member name="T:Puzzles.Meta.Concepts.CoordinateExtensions">
            <summary>
            Represents a coordinate.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Concepts.CoordinateExtensions.<>E__0">
            <summary>
            Provides extension members on <see cref="T:Puzzles.Meta.Concepts.Coordinate"/>.
            </summary>
        </member>
        <member name="M:Puzzles.Meta.Concepts.CoordinateExtensions.<>E__0.IsOutOfBound``1(``0)">
            <summary>
            Indicates whether the coordinate is out of bound.
            </summary>
            <typeparam name="TBoard">The type of the board.</typeparam>
            <param name="grid">The grid.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Meta.Concepts.CoordinateExtensions.<>E__0.IsOnBorder``1(``0)">
            <summary>
            Determine whether the coordinate is on the border rows or columns of the board.
            </summary>
            <typeparam name="TBoard">The type of the board.</typeparam>
            <param name="grid">The grid.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Meta.Concepts.CoordinateExtensions.<>E__0.ToIndex``1(``0)">
            <summary>
            Converts the current coordinate into an absolute index.
            </summary>
            <typeparam name="TBoard">The type of the board.</typeparam>
            <param name="grid">The grid.</param>
            <returns>The absolute index.</returns>
        </member>
        <member name="M:Puzzles.Meta.Concepts.CoordinateExtensions.IsOutOfBound``1(Puzzles.Meta.Concepts.Coordinate,``0)">
            <inheritdoc cref="M:Puzzles.Meta.Concepts.CoordinateExtensions.<>E__0.IsOutOfBound``1(``0)"/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.CoordinateExtensions.IsOnBorder``1(Puzzles.Meta.Concepts.Coordinate,``0)">
            <inheritdoc cref="M:Puzzles.Meta.Concepts.CoordinateExtensions.<>E__0.IsOnBorder``1(``0)"/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.CoordinateExtensions.ToIndex``1(Puzzles.Meta.Concepts.Coordinate,``0)">
            <inheritdoc cref="M:Puzzles.Meta.Concepts.CoordinateExtensions.<>E__0.ToIndex``1(``0)"/>
        </member>
        <member name="T:Puzzles.Meta.Concepts.Direction">
            <summary>
            Represents a direction.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.None">
            <summary>
            Indicates the placeholder of the direction.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.Up">
            <summary>
            Indicates the direction is up.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.Down">
            <summary>
            Indicates the direction is down.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.Left">
            <summary>
            Indicates the direction is left.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.Right">
            <summary>
            Indicates the diretcion is right.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.UpLeft">
            <summary>
            Indicates the direction is up-left.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.UpRight">
            <summary>
            Indicates the direction is up-right.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.DownLeft">
            <summary>
            Indicates the direction is down-left.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Concepts.Direction.DownRight">
            <summary>
            Indicates the direction is down-right.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Concepts.DirectionExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Puzzles.Meta.Concepts.Direction"/>.
            </summary>
            <seealso cref="T:Puzzles.Meta.Concepts.Direction"/>
        </member>
        <member name="T:Puzzles.Meta.Concepts.DirectionExtensions.<>E__0">
            <summary>
            Provides extension members on <see cref="T:Puzzles.Meta.Concepts.Direction"/>.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.DirectionExtensions.<>E__0.ReversedDirection">
            <summary>
            Indicates the reversed direction.
            </summary>
        </member>
        <member name="M:Puzzles.Meta.Concepts.DirectionExtensions.<>E__0.GetArrow">
            <summary>
            Gets an arrow text that represents the specified direction.
            </summary>
            <returns>The character.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument is out of range.</exception>
        </member>
        <member name="M:Puzzles.Meta.Concepts.DirectionExtensions.get_ReversedDirection(Puzzles.Meta.Concepts.Direction)">
            <inheritdoc cref="P:Puzzles.Meta.Concepts.DirectionExtensions.<>E__0.ReversedDirection"/>
        </member>
        <member name="M:Puzzles.Meta.Concepts.DirectionExtensions.GetArrow(Puzzles.Meta.Concepts.Direction)">
            <inheritdoc cref="M:Puzzles.Meta.Concepts.DirectionExtensions.<>E__0.GetArrow"/>
        </member>
        <member name="T:Puzzles.Meta.Concepts.IBoard">
            <summary>
            Represents a game board. The board must be a rectangular or squared one, with a regular definition of "row" and "column".
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.IBoard.Rows">
            <summary>
            Indicates the number of rows.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.Concepts.IBoard.Columns">
            <summary>
            Indicates the number of columns.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Measuring.DistanceType">
            <summary>
            Represents a type of distance to be measured.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Measuring.DistanceType.Euclid">
            <summary>
            Indicates Euclid distance.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Measuring.DistanceType.Manhattan">
            <summary>
            Indicates Manhattan distance.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Measuring.DistanceType.Solved">
            <summary>
            Indicates solved distance.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Solving.Uniqueness">
            <summary>
            Represents a flag describing the number of solutions to a puzzle.
            </summary>
            <remarks><flags-attribute>
		<para>
			<i>
				This type is marked <see cref="T:System.FlagsAttribute" />, which means you can use
				<see langword="operator" /> | to combine multiple fields.
			</i>
		</para>
	</flags-attribute></remarks>
        </member>
        <member name="F:Puzzles.Meta.Solving.Uniqueness.None">
            <summary>
            The placeholder of this type.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Solving.Uniqueness.Bad">
            <summary>
            Indicates the puzzle has no valid solution.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Solving.Uniqueness.Unique">
            <summary>
            Indicates the puzzle has a unique solution.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Solving.Uniqueness.Multiple">
            <summary>
            Indicates the puzzle has multiple solutions.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Transforming.BoardComparison">
            <summary>
            Specifies the comparison rule of a <see cref="T:Puzzles.Meta.Concepts.IBoard"/> instance.
            </summary>
            <seealso cref="T:Puzzles.Meta.Concepts.IBoard"/>
        </member>
        <member name="F:Puzzles.Meta.Transforming.BoardComparison.Default">
            <summary>
            Indicates two <see cref="T:Puzzles.Meta.Concepts.IBoard"/> instances compare with each other by using the default checking rule
            (cell by cell, bit by bit).
            </summary>
        </member>
        <member name="F:Puzzles.Meta.Transforming.BoardComparison.IncludingTransforms">
            <summary>
            Indicates two <see cref="T:Puzzles.Meta.Concepts.IBoard"/> instances compare with each other, including considerations on transforming cases.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.Transforming.IBoardTransformable`1">
            <summary>
            Represents an object that can be transformed into another kind of value.
            </summary>
            <typeparam name="TSelf"><self-type-constraint>
		<para>Indicates the type implementing this interface.</para>
		<para>
			This type doesn't use any extra syntax to constraint such usage, but C# will check for it.
			The type will include a <see langword="where" /> constraint that implements the interface itself
			to declare such "self constraint" usage:
			<code><![CDATA[interface ISelfType<TSelf> where TSelf : ISelfType<TSelf>]]></code>
			In addition, the type should be named <c>TSelf</c> in order to tell type parameters with the others.
		</para>
	</self-type-constraint></typeparam>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.RotateClockwise">
            <summary>
            Rotate <typeparamref name="TSelf"/> instance clockwisely.
            </summary>
            <returns>The result rotated.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.RotateCounterclockwise">
            <summary>
            Rotate <typeparamref name="TSelf"/> instance counter-clockwisely.
            </summary>
            <returns>The result rotated.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.RotatePi">
            <summary>
            Rotate <typeparamref name="TSelf"/> instance 180 degrees.
            </summary>
            <returns>The result rotated.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.MirrorLeftRight">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in left-right side.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.MirrorTopBottom">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in top-bottom side.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.MirrorDiagonal">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in diagonal.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.Transpose">
            <summary>
            Simply calls <see cref="M:Puzzles.Meta.Transforming.IBoardTransformable`1.MirrorDiagonal"/>.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IBoardTransformable`1.MirrorAntidiagonal">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in anti-diagonal.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="T:Puzzles.Meta.Transforming.IElementSwappingTransformable`2">
            <summary>
            Represents an object that can swap elements of itself.
            </summary>
            <typeparam name="TSelf"><self-type-constraint>
		<para>Indicates the type implementing this interface.</para>
		<para>
			This type doesn't use any extra syntax to constraint such usage, but C# will check for it.
			The type will include a <see langword="where" /> constraint that implements the interface itself
			to declare such "self constraint" usage:
			<code><![CDATA[interface ISelfType<TSelf> where TSelf : ISelfType<TSelf>]]></code>
			In addition, the type should be named <c>TSelf</c> in order to tell type parameters with the others.
		</para>
	</self-type-constraint></typeparam>
            <typeparam name="TElement">The type of each element.</typeparam>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IElementSwappingTransformable`2.SwapElement(`1,`1)">
            <summary>
            Swaps all elements whose values are equal to <paramref name="element1"/> and <paramref name="element2"/>.
            </summary>
            <param name="element1">The first element to be swapped.</param>
            <param name="element2">The second element to be swapped.</param>
            <returns>The result swapped.</returns>
        </member>
        <member name="M:Puzzles.Meta.Transforming.IElementSwappingTransformable`2.Shuffle">
            <summary>
            Try to shuffle <typeparamref name="TSelf"/> instance of elements, keeping equality with the current instance.
            </summary>
            <returns>The result shuffled.</returns>
        </member>
    </members>
</doc>
